plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.20.0'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'

    compile 'com.drewnoakes:metadata-extractor:2.14.0'
    compile 'org.slf4j:slf4j-api:1.7.30'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
}
targetCompatibility= 14
sourceCompatibility = 14
mainClassName = 'com.williamquast.Application'
group 'com.williamquast'
version '1.0'

javafx {
    version = '14'
    modules = [ 'javafx.controls', 'javafx.fxml']
}

// for start script dist
distZip {
    archiveName "${archivesBaseName}-${project.version}-bin.zip"
}
distTar.enabled = false

ext.os = org.gradle.internal.os.OperatingSystem.current()
jlink {
    forceMerge('log4j-api')
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Photo2Kml'
    }
    jpackage {
        outputDir = "installer"
        imageName = 'Photo2Kml'
        skipInstaller = false
        installerName = 'Photo2Kml'

        if(os.isMacOsX()) {
            println('JPackage using MacOSX options.')
            installerType = 'dmg'
            installerOptions = [
                    '--mac-sign',
//                  '--mac-signing-key-user-name', System.getenv('SIGNING_KEY_USER_NAME'),
//                  '--mac-signing-keychain', System.getenv('SIGNING_KEYCHAIN_PATH')
            ]
        } else if(os.isWindows()) {
            println('JPackage using Windows options.')
            imageOptions = [ '--icon', 'src/main/resources/app.ico']
            installerOptions = ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if(os.isLinux()) {
            println('JPackage using Linux options.')
            installerType = 'deb' // 'rpm'
        }
        installerOptions += '--verbose'
    }
}
assemble.dependsOn(jpackage) // assemble includes jpackage



//task createWindowsDist(type: Zip) {
//    dependsOn(createAllExecutables)
//    from "${project.buildDir}/launch4j"
//    into "${archivesBaseName}"
//    include '**/*'
//    archiveName "${archivesBaseName}-${project.version}-win.zip"
//    destinationDir(file("${project.buildDir}/distributions/"))
//}
//assemble.dependsOn(createWindowsDist) // assemble includes windows

